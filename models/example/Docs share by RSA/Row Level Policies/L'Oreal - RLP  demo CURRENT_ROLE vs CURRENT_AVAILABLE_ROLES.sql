--set context and set up demo environment
USE ROLE SYSADMIN;
CREATE DATABASE RLS_DEMO_DB;
USE DATABASE RLS_DEMO_DB;
CREATE SCHEMA LEARNING WITH MANAGED ACCESS;
CREATE SCHEMA SECURITY WITH MANAGED ACCESS;

--create a table with securable data
CREATE OR REPLACE TRANSIENT TABLE LEARNING.MODULE_COMPLETION 
(
     REGION VARCHAR
    ,EMPLOYEE VARCHAR
    ,MODULE VARCHAR
    ,COMPLETION_DATE DATE
);

--populate securable data
INSERT OVERWRITE INTO LEARNING.MODULE_COMPLETION 
(
     REGION
    ,EMPLOYEE
    ,MODULE
    ,COMPLETION_DATE
)
VALUES
 ('FI','OLLE','SNOWFLAKE_BASICS','2022-04-01')
,('FR','JULIA','SNOWFLAKE_ADVANCED','2022-04-10')
,('MX','SANTIAGO','SNOWFLAKE_GURU','2022-05-15')
,('US','MONICA','SNOWFLAKE_SALES','2022-06-30');


--create entitlement table
CREATE OR REPLACE TRANSIENT TABLE SECURITY.REGION_RLS
(
     REGION VARCHAR
    ,RLS_ROLE VARCHAR
);

--populate entitlement table
INSERT OVERWRITE INTO SECURITY.REGION_RLS 
(
     REGION
    ,RLS_ROLE
)
VALUES
 ('FI','RLS_ROLE_FI')
,('FR','RLS_ROLE_FR')
,('MX','RLS_ROLE_MX')
,('US','RLS_ROLE_US');


--create a row access policy based on CURRENT_ROLE()
--DROP ROW ACCESS POLICY IF EXISTS SECURITY.REGION_RLS_POLICY_CURRENT_ROLE;
CREATE OR REPLACE ROW ACCESS POLICY SECURITY.REGION_RLS_POLICY_CURRENT_ROLE AS (P_REGION VARCHAR) RETURNS BOOLEAN ->
EXISTS 
(
    --look up specified region against current role
    SELECT 
        1
    FROM 
        SECURITY.REGION_RLS
    WHERE
        REGION = P_REGION
        AND
        RLS_ROLE=CURRENT_ROLE() 
);

--create a row access policy based on CURRENT_AVAILABLE_ROLES()
CREATE OR REPLACE ROW ACCESS POLICY SECURITY.REGION_RLS_POLICY_CURRENT_AVAILABLE_ROLES AS (P_REGION VARCHAR) RETURNS BOOLEAN ->
EXISTS
(
    --look up specified region against current available roles
    SELECT 
        1
    FROM
        SECURITY.REGION_RLS
    WHERE 
        --match region with input
        REGION = P_REGION
        AND 
        --match with any of "current available roles", i.e. anything that has been granted directly or through inheritance to the current user
        ARRAY_CONTAINS(RLS_ROLE::VARIANT, PARSE_JSON(CURRENT_AVAILABLE_ROLES())) 
);

select CURRENT_AVAILABLE_ROLES();

--create region specific RLS roles
USE ROLE USERADMIN;
CREATE ROLE IF NOT EXISTS RLS_ROLE_MX;
CREATE ROLE IF NOT EXISTS RLS_ROLE_FI;
CREATE ROLE IF NOT EXISTS RLS_ROLE_FR;
CREATE ROLE IF NOT EXISTS RLS_ROLE_US;
CREATE ROLE IF NOT EXISTS RLS_ROLE_EUROPE;
CREATE ROLE IF NOT EXISTS RLS_ROLE_AMERICAS;
CREATE ROLE IF NOT EXISTS RLS_ROLE_GLOBAL;

--establish hierarchy between roles -- we want to utilize this in the RLS if possible
USE ROLE USERADMIN;
GRANT ROLE RLS_ROLE_FI TO ROLE RLS_ROLE_EUROPE;
GRANT ROLE RLS_ROLE_FR TO ROLE RLS_ROLE_EUROPE;
GRANT ROLE RLS_ROLE_MX TO ROLE RLS_ROLE_AMERICAS;
GRANT ROLE RLS_ROLE_US TO ROLE RLS_ROLE_AMERICAS;
GRANT ROLE RLS_ROLE_EUROPE TO ROLE RLS_ROLE_GLOBAL;
GRANT ROLE RLS_ROLE_AMERICAS TO ROLE RLS_ROLE_GLOBAL;

--generate table access role to the data
USE ROLE USERADMIN;
CREATE ROLE IF NOT EXISTS LEARNING_READER_ROLE;

--grant global rls role and the table access role to current user
GRANT ROLE RLS_ROLE_GLOBAL TO USER OSUNI;
GRANT ROLE LEARNING_READER_ROLE TO USER OSUNI;

--grant select access to the access role
USE ROLE SYSADMIN;
GRANT USAGE ON DATABASE RLS_DEMO_DB TO ROLE LEARNING_READER_ROLE;
GRANT USAGE ON SCHEMA RLS_DEMO_DB.LEARNING TO ROLE LEARNING_READER_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA RLS_DEMO_DB.LEARNING TO ROLE LEARNING_READER_ROLE;

--add or remove row access policy based on current role
USE ROLE SYSADMIN;
ALTER TABLE LEARNING.MODULE_COMPLETION ADD ROW ACCESS POLICY SECURITY.REGION_RLS_POLICY_CURRENT_ROLE ON (REGION);
ALTER TABLE LEARNING.MODULE_COMPLETION DROP ROW ACCESS POLICY SECURITY.REGION_RLS_POLICY_CURRENT_ROLE;

--test row access policy based on current role
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'SYSADMIN')          AS SELECT * FROM LEARNING.MODULE_COMPLETION; --no data => expected behavior
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_FI')       AS SELECT * FROM LEARNING.MODULE_COMPLETION; --FI data => expected behavior
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_FR')       AS SELECT * FROM LEARNING.MODULE_COMPLETION; --FR data => expected behavior
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_MX')       AS SELECT * FROM LEARNING.MODULE_COMPLETION; --MX data => expected behavior
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_US')       AS SELECT * FROM LEARNING.MODULE_COMPLETION; --US data => expected behavior
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_EUROPE')   AS SELECT * FROM LEARNING.MODULE_COMPLETION; --no data => not desired behavior 
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_AMERICAS') AS SELECT * FROM LEARNING.MODULE_COMPLETION; --no data => not desired behavior
EXECUTE USING POLICY_CONTEXT(CURRENT_ROLE => 'RLS_ROLE_GLOBAL')   AS SELECT * FROM LEARNING.MODULE_COMPLETION; --no data => not desired behavior
--to support country entitlements rolling up to regions and global, we would need to add new records to the REGION_RLS table...

--add or remove row access policy based on current available roles
USE ROLE SYSADMIN;
ALTER TABLE LEARNING.MODULE_COMPLETION ADD ROW ACCESS POLICY SECURITY.REGION_RLS_POLICY_CURRENT_AVAILABLE_ROLES ON (REGION);
ALTER TABLE LEARNING.MODULE_COMPLETION DROP ROW ACCESS POLICY SECURITY.REGION_RLS_POLICY_CURRENT_AVAILABLE_ROLES;

--test row access policty based on current available roles
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["SYSADMIN"]')    AS SELECT * FROM LEARNING.MODULE_COMPLETION; --no data
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["RLS_ROLE_FI"]') AS SELECT * FROM LEARNING.MODULE_COMPLETION; --FI data
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["RLS_ROLE_FR"]') AS SELECT * FROM LEARNING.MODULE_COMPLETION; --FR data
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["RLS_ROLE_MX"]') AS SELECT * FROM LEARNING.MODULE_COMPLETION; --MX data
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["RLS_ROLE_US"]') AS SELECT * FROM LEARNING.MODULE_COMPLETION; --US data

--neex to add "inherited" roles to the "role-to-be-tested" to get the correct results
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["RLS_ROLE_EUROPE","RLS_ROLE_FI","RLS_ROLE_FR"]')   AS SELECT * FROM LEARNING.MODULE_COMPLETION; --EUROPE data
EXECUTE USING POLICY_CONTEXT (CURRENT_AVAILABLE_ROLES => '["RLS_ROLE_AMERICAS","RLS_ROLE_MX","RLS_ROLE_US"]') AS SELECT * FROM LEARNING.MODULE_COMPLETION; --AMERICAS data

--for global access, we need to manually "inherit" all of them... 
EXECUTE USING POLICY_CONTEXT 
(CURRENT_AVAILABLE_ROLES => 
'[
     "RLS_ROLE_GLOBAL" 
    ,"RLS_ROLE_AMERICAS"
    ,"RLS_ROLE_MX"
    ,"RLS_ROLE_US"
    ,"RLS_ROLE_EUROPE"
    ,"RLS_ROLE_FI"
    ,"RLS_ROLE_FR"
]')   
AS 
SELECT * FROM LEARNING.MODULE_COMPLETION; --GLOBAL data

--test the same using separate user (log in in another window)
USE ROLE USERADMIN;
DROP USER RLS_TESTER;
CREATE USER RLS_TESTER PASSWORD='INSERT_PASSWORD_HERE', DEFAULT_WAREHOUSE=COMPUTE_WH, DEFAULT_ROLE=LEARNING_READER_ROLE, DEFAULT_NAMESPACE='RLS_DEMO_DB.LEARNING';
GRANT ROLE LEARNING_READER_ROLE TO USER RLS_TESTER;

--grant/revoke tests -- check results in another window
USE ROLE SECURITYADMIN;

GRANT ROLE ACCOUNTADMIN         TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_FI          TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_FR          TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_EUROPE      TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_MX          TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_US          TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_AMERICAS    TO USER RLS_TESTER;
GRANT ROLE RLS_ROLE_GLOBAL      TO USER RLS_TESTER;

REVOKE ROLE ACCOUNTADMIN        FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_FI         FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_FR         FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_EUROPE     FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_MX         FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_US         FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_AMERICAS   FROM USER RLS_TESTER;
REVOKE ROLE RLS_ROLE_GLOBAL     FROM USER RLS_TESTER;

/* clean-up */

--database 
USE ROLE SYSADMIN;
DROP DATABASE IF EXISTS RLS_DEMO_DB;

--test user and roles
USE ROLE USERADMIN;
DROP USER IF EXISTS RLS_TESTER;
DROP ROLE IF EXISTS RLS_ROLE_MX;
DROP ROLE IF EXISTS RLS_ROLE_FI;
DROP ROLE IF EXISTS RLS_ROLE_FR;
DROP ROLE IF EXISTS RLS_ROLE_US;
DROP ROLE IF EXISTS RLS_ROLE_EUROPE;
DROP ROLE IF EXISTS RLS_ROLE_AMERICAS;
DROP ROLE IF EXISTS RLS_ROLE_GLOBAL;
DROP ROLE IF EXISTS LEARNING_READER_ROLE;



/*IN ANOTHER WINDOW, LOGGED IN AS RLS_TESTER*/

--set general session context
SELECT CURRENT_USER(); --RLS_TESTER
USE ROLE LEARNING_READER_ROLE;
USE DATABASE RLS_DEMO_DB;

--check current available roles
SELECT CURRENT_AVAILABLE_ROLES();

--execute the same query with different grants applied in the background
SELECT * FROM LEARNING.MODULE_COMPLETION; 
--only SYSADMIN granted          => no data
--only RLS_ROLE_FI granted       => FI data
--only RLS_ROLE_FR granted       => FR data
--only RLS_ROLE_EUROPE granted   => both FI and FR data
--only RLS_ROLE_AMERICAS granted => both MX and US data
--only RLS_ROLE_GLOBAL granted   => all regions data 